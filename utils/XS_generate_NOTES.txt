Created on: Mon 23 Jan 2017 05:24:22 PM 
Last saved: Wed 25 Jan 2017 05:01:23 PM 

This file consists of notes and ideas for work to do to improve
the automated code generation of OpenGL XS bindings from the
GLEW include file declarations in glew.h.

* OpenGL Features are marked with lines in this form:

  #ifndef GL_FEATURE_NAME
  #define GL_FEATURE_NAME 1
  
  //  declarations,
  //  definitions,
  //  and typemaps for
  //  GL_FEATURE_NAME
  //  ...
  
  #endif /* GL_FEATURE_NAME */
 
  This sugggests the following, more specific, algorithm to
  identify the current OpenGL feature in glew.h:

  (1) Search for #ifndef to get a $maybe_feature_name
  (2) If the next line is #define $maybe_feature_name 1 then set $feature_name
  (3) Process lines for $feature_name until...
  (4) We reach the line #endif /* $feature_name */

  This takes advantage of the specific format of GLEW headers and
  avoids confusing heuristics like ignoring GL_TRUE and GL_ONE.

* Clean up use of regular expressions by using qr// assigned to
  appropriately named perl variables, extended regex syntax,...

* Collect file line handling machinery into subs so that the intent
  of the code can be better understood and more easily maintained.

* Add status logging output so that debugging is simpler.

* Categorize OpenGL bindings as "good" or "bad" according to whether
  or not they have pointer arguments.

  - The good routines (DONE)
    - translate cleanly to XS with default typemaps
    - won't require a separate _p perlish version
    - There are 1265 good routines that translate directly (yay!)

  - The "bad" routines (with pointer args)
    - C function declaration is ambiguous
    - The argument could be input, output, or both
    - The argument could be a pointer or a pointer to data
    - The argument could point to an array of 1 or more elements
    - Usage comes from the OpenGL specification
    - These routines require manual review for optimal handling

  - There are 1483 functions with at least one pointer (or [] arg)
    - 1329 routines with 1 ptr
    -  102 routines with 2 ptrs
    -   29 routines with 3 ptrs
    -   16 routines with 4 ptrs
    -    4 routines with 5 ptrs
    -    2 routines with 6 ptrs
    -    1 routines with 7 ptrs

  - Propose using T_PTRREF or T_PTROBJ for pointers at perl level
    - T_PTR is simple but could lead to SEGFAULT with bad values
    - T_PTRREF/OBJ protect pointer value from accidental corruption
    - Using a reference/object makes for simple typemaps
      - Just use ref to identify and then use 
      - Can be done from Perl or C/XS
      - Some examples:
        - an array ref, [ ]
        - a hash ref, { }
        - a scalar ref, \$
        - a blessed object: PDL, Cpointer, OGA, ...

* Consider writing generate-XS.pl as a modulino so that it could be
  used as either a command or a module to load and use.

* Propose use of roles to generalize implementation
  - Basic role provides placeholders for needed functionality
  - Use around method modifiers to provide actual function
  - Should be able to "compile" the around routine make fast
    - could be memoized at the perl level
    - could be done from the C/XS level
  - First implementation will focus on functionality
  - Optimized routines to come or use specific _c routine

* Plan of implementation for routines with pointer/array args:
  - Basic implementation uses a ref-able type at the perl level
    - objects: OpenGL::Array or PDL or TBD
    - native refs: ARRAY, SCALAR, HASH where appropriate
    - if appropriate, allow ARRAY to be @array if unambiguous
    - baseline implementation assumes allocation before GL call
      - consistent with OpenGL C API
      - C documentation aligns with perl implementations
      - there is a question of implementation for buffer mapping operations
      - could add allocation but need to clarify what is needed to do
    - How should input and output types be constrained?
      - All the same
      - Mix and match
      - Other
